import armas.*
import personaje.*
import direcciones.*
import municiones.*
import obstaculo.*
import wollok.game.*

describe "Armas"{
	
	const pistolaSinMunicion = new Pistola(municionDisponible = 0, municionCargador = 0)
	const pistolaRecargar = new Pistola(municionCargador = 0)
	const minigun = new Minigun()
	const minigunPocasBalas = new Minigun(municionCargador = 4)
	const minigunNoDisparable = new Minigun(municionCargador = 2)
	
	test "probando que se usa Arma"{
		doomGuy.dispararSiEstaVivo(new Derecha())
		assert.equals(6, doomGuy.arma().municionCargador())
	}
	
	test "probando falta de municion"{
		//equipo el arma sin municion al doomGuy
		doomGuy.equipar(pistolaSinMunicion)
		//no puede disparar porque no tiene municion
		assert.throwsExceptionWithMessage("No hay mas municion", {doomGuy.dispararSiEstaVivo(new Derecha())})
	}
	
	test "probando recarga"{
		//equipo el arma sin municion en cargador al doomGuy
		doomGuy.equipar(pistolaRecargar)
		//no puede disparar porque tiene que recargar
		assert.throwsExceptionWithMessage("Recargando", {doomGuy.dispararSiEstaVivo(new Derecha())})
	}
	
	test "recargando el arma"{
		//equipo el arma sin municion en cargador al doomGuy
		doomGuy.equipar(pistolaRecargar)
		//recargo el arma
		doomGuy.arma().recargar()
		assert.equals(7, doomGuy.arma().municionCargador())
		assert.equals(63, doomGuy.arma().municionDisponible())
	}
	
	test "probando Minigun"{
		doomGuy.equipar(minigun)
		doomGuy.dispararSiEstaVivo(new Derecha())
		assert.equals(72, doomGuy.arma().municionCargador())
	}
	
	test "comprobando municion Minigun"{
		doomGuy.equipar(minigunPocasBalas)
		assert.that(doomGuy.arma().hayMunicionSuficienteCargador(3))
		doomGuy.dispararSiEstaVivo(new Derecha())
		assert.notThat(doomGuy.arma().hayMunicionSuficienteCargador(3))
	}
	
	test "probando recarga minigun sin suficientes balas"{
		doomGuy.equipar(minigunNoDisparable)
		//no puede disparar porque no tiene las balas suficientes, por lo que recarga.
		assert.throwsExceptionWithMessage("Recargando", {doomGuy.dispararSiEstaVivo(new Derecha())})
	}
}

describe "Obstaculos"{
	const muro = new Muro(durabilidad = 2)
	
	test "probando durabilidad Muro"{
		muro.sufrirImpacto(new Bala(causante = doomGuy, ataque = doomGuy.arma().danio()))
		assert.equals(1, muro.durabilidad())
	}
	
	test "probando Muro roto"{
		//agrego la visual del muro
		game.addVisual(muro)
		//corroboro que esta
		assert.that(game.hasVisual(muro))
		//rompo el muro
		muro.sufrirImpacto(new Bala(causante = doomGuy, ataque = doomGuy.arma().danio()))
		muro.sufrirImpacto(new Bala(causante = doomGuy, ataque = doomGuy.arma().danio()))
		//corroboro que no existe mas
		assert.notThat(game.hasVisual(muro))
	}
}