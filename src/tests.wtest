import armas.*
import personaje.*
import enemigos.*
import direcciones.*
import municiones.*
import obstaculo.*
import wollok.game.*

describe "Armas"{
	
	const pistolaSinMunicion = new Pistola(municionDisponible = 0, municionCargador = 0)
	const pistolaRecargar = new Pistola(municionCargador = 0)
	const minigun = new Minigun()
	const minigunPocasBalas = new Minigun(municionCargador = 4)
	const minigunNoDisparable = new Minigun(municionCargador = 2)
	
	test "probando que se usa Arma"{
		doomGuy.dispararSiEstaVivo(new Derecha())
		assert.equals(6, doomGuy.arma().municionCargador())
	}
	
	test "probando falta de municion"{
		//equipo el arma sin municion al doomGuy
		doomGuy.equipar(pistolaSinMunicion)
		//no puede disparar porque no tiene municion
		assert.throwsExceptionWithMessage("No hay mas municion", {doomGuy.dispararSiEstaVivo(new Derecha())})
	}
	
	test "probando recarga"{
		//equipo el arma sin municion en cargador al doomGuy
		doomGuy.equipar(pistolaRecargar)
		//no puede disparar porque tiene que recargar
		assert.throwsExceptionWithMessage("Recargando", {doomGuy.dispararSiEstaVivo(new Derecha())})
	}
	
	test "recargando el arma"{
		//equipo el arma sin municion en cargador al doomGuy
		doomGuy.equipar(pistolaRecargar)
		//recargo el arma
		doomGuy.arma().recargar()
		assert.equals(7, doomGuy.arma().municionCargador())
		assert.equals(63, doomGuy.arma().municionDisponible())
	}
	
	test "probando Minigun"{
		doomGuy.equipar(minigun)
		doomGuy.dispararSiEstaVivo(new Derecha())
		assert.equals(72, doomGuy.arma().municionCargador())
	}
	
	test "comprobando municion Minigun"{
		doomGuy.equipar(minigunPocasBalas)
		assert.that(doomGuy.arma().hayMunicionSuficienteCargador(3))
		doomGuy.dispararSiEstaVivo(new Derecha())
		assert.notThat(doomGuy.arma().hayMunicionSuficienteCargador(3))
	}
	
	test "probando recarga minigun sin suficientes balas"{
		doomGuy.equipar(minigunNoDisparable)
		//no puede disparar porque no tiene las balas suficientes, por lo que recarga.
		assert.throwsExceptionWithMessage("Recargando", {doomGuy.dispararSiEstaVivo(new Derecha())})
	}
}

describe "Obstaculos"{
	const muro = new Muro(durabilidad = 2)
	const barril = new Barril()
	
	//creo a los enemigos
	const armaEnemigo1 = new LanzaBolasFuego()
	const enemigo1 = new Cacodemon(arma = armaEnemigo1, estado = "default", salud = 100)
	const armaEnemigo2 = new LanzaBolasPlasma()
	const enemigo2 = new BaronOfHell(arma = armaEnemigo2, estado = "default", salud = 750)
		
	test "probando durabilidad Muro"{
		muro.sufrirImpacto(new Bala(causante = doomGuy, ataque = doomGuy.arma().danio()))
		assert.equals(1, muro.durabilidad())
	}
	
	test "probando Muro roto"{
		//agrego la visual del muro
		game.addVisual(muro)
		//corroboro que esta
		assert.that(game.hasVisual(muro))
		//rompo el muro
		muro.sufrirImpacto(new Bala(causante = doomGuy, ataque = doomGuy.arma().danio()))
		muro.sufrirImpacto(new Bala(causante = doomGuy, ataque = doomGuy.arma().danio()))
		//corroboro que no existe mas
		assert.notThat(game.hasVisual(muro))
	}
	
	test "explotando barril con enemigos en zona explosion"{
		//agrego la visual del barril y los enemigos
		game.addVisual(barril)
		game.addVisual(enemigo1)
		game.addVisual(enemigo2)
		
		//pongo el barril para que haga efecto alrededor
		barril.position(game.center())
		
		//pongo los enemigos en el mismo lugar que el barril
		enemigo1.position(game.center())
		enemigo2.position(game.center())
		
		//posiciono a los enemigos en la zona de explosion
		enemigo1.mover(new Abajo())
		enemigo2.mover(new Izquierda())
		
		//las otras posiciones donde podrian verse atraidas en la explosion (comentar las 2 de arriba y descomentar las de abajo)
		//enemigo1.mover(new Arriba())
		//enemigo2.mover(new Derecha())
		
		//el barril sufre el impacto de una bala de Doomguy y explota
		barril.sufrirImpacto(new Bala(causante = doomGuy, ataque = doomGuy.arma().danio()))
		
		//corroboro que el barril se destruye y el enemigo1 muere (pierde 500 de vida)
		//mientras que el enemigo2 sobrevive con 250 de vida ya que tiene 750 y el barril hace 500 de danio
		assert.notThat(game.hasVisual(barril))
		assert.equals(-400, enemigo1.salud())
		assert.equals(250, enemigo2.salud())
	}
	
	test "explotando barril sin enemigos en zona explosion"{
		//agrego la visual del barril y los enemigos
		game.addVisual(barril)
		game.addVisual(enemigo1)
		game.addVisual(enemigo2)
		
		//pongo los enemigos en otro lugar, fuera del rango de la explosion
		enemigo1.position(game.center())
		enemigo2.position(game.center())
		
		//el barril sufre el impacto de una bala de Doomguy y explota
		barril.sufrirImpacto(new Bala(causante = doomGuy, ataque = doomGuy.arma().danio()))
		
		//corroboro que el barril no esta porque se destruye y que los enemigos siguen intactos
		//al no verse afectados por la explosion
		assert.notThat(game.hasVisual(barril))
		assert.equals(100, enemigo1.salud())
		assert.equals(750, enemigo2.salud())
	}
	
}